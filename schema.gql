enum RangerName {
    JASON_LEE_SCOTT
    KIMBERLY_ANN_HART
    BILLY_CRANSTON
    TRINI_KWAN
    ZACK_TAYLOR
    ROCKY_DESANTOS
    ADAM_PARK
    KAT_HILLARD
    AISHA_CAMPBELL
    TOMMY_OLIVER
    ALPHA_5
    MARVIN_SHIH
    JACK_THOMAS
    CHLOE_ASHFORD
    EDDIE_BANKS
    VESPER_VASQUEZ
    LAUREN_SHIBA
    JEN_SCOTTS
    EUGENE_SKULLOVITCH
    FARKAS_BULKEMIER
    MIKE_CORBETT
    ANUBIS_CRUGER
    PHANTOM_RANGER
    TREY_OF_TRIFORIA
    TANYA_SLOAN
    NINJOR
}

enum CardType {
  RANGER
  ZORD
  MONSTER
  BOSS
  MEGAZORD
}

enum ActionType {
  ATTACK
  REACTION
  MANEUVER
}

enum CardAdvantage {
  ATK
  SHIELD
  ENERGY
  TURN
}

enum RangerColor {
  BLUE
  RED
  YELLOW
  GREEN
  PINK
  BLACK
  GOLD
  SILVER
  PURPLE
  ORANGE
  NONE
  WHITE
}

# A guestbook entry requires a twitter handle (!) and a story
# However, FaunaDB automatically adds two private values: _id and _ts
type Card {
  id: ID!
  name: String!
  description: String!
  entity: CardType!
  actionType: ActionType
  attack: Int
  shield: Int
  energy: Int
  ability: String
  symbol: String
  frequency: Float
  energyEfficiency: Float
  extraDamage: Float
  cardOrderManipulation: Bool
  advantage: CardAdvantage
  team: String
  image: String
  specialText: String
  multiAttack: Bool
  releaseDate: Int
  set: String!
  role: String
  image: String
  color: RangerColor

  # _id: Generated by FaunaDB as each document's unique identifier
  # _ts: Timestamp generated by FaunaDB upon object creation
}

type CardInformation {
    name: String!
    ranger: String
    team: String
    image: String
    frequency: Float
    energy: Int
    attack: Int
    shield: Int
    actionType: ActionType
    description: String!
    symbol: String
    specialText: String
    multiAttack: Bool
    color: RangerColor
    releaseDate: String
}

type Zord {
    name: String!
    image: String
    ranger: Ranger!
    description: String!
    color: RangerColor!
    releaseDate: Int
}

type Ranger implements Card {
    name: String!
    image: String
    ability: String!
    description: String!
    team: String
    set: String!
    color: RangerColor!
    releaseDate: Int
    role: String
}

type Megazords {
    name: String!
    image: String
    ability: String!
    color: RangerColor!
    team: String
    set: String!
    releaseDate: Int
}

# A query named 'entries' which returns an array of GuestbookEntry objects
# Implicit arguments: _size (count) and _cursor (location within the Index)
type Query {
  zords(name: String!): [Card {
    id
    name
    image
    ranger
    description
    color
    releaseDate
    set
  }]
}

type Query {
  getCardInformation($id: Int): [CardInformation]
  getZords: [Zord]
  getRangers: [Ranger]
  getMegazords: [Megazord]
}
