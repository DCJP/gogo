enum RangerName {
    JASON_LEE_SCOTT
    KIMBERLY_ANN_HART
    BILLY_CRANSTON
    TRINI_KWAN
    ZACK_TAYLOR
    ROCKY_DESANTOS
    ADAM_PARK
    KAT_HILLARD
    AISHA_CAMPBELL
    TOMMY_OLIVER
    ALPHA_5
    MARVIN_SHIH
    JACK_THOMAS
    CHLOE_ASHFORD
    EDDIE_BANKS
    VESPER_VASQUEZ
    LAUREN_SHIBA
    JEN_SCOTTS
    EUGENE_SKULLOVITCH
    FARKAS_BULKEMIER
    MIKE_CORBETT
    ANUBIS_CRUGER
    PHANTOM_RANGER
    TREY_OF_TRIFORIA
    TANYA_SLOAN
    NINJOR
}

enum CardType {
  RANGER
  ZORD
  MONSTER
  BOSS
  MEGAZORD
}

enum ActionType {
  ATTACK
  REACTION
  MANEUVER
}

enum CardAdvantage {
  ATK
  SHIELD
  ENERGY
  TURN
}

enum RangerColor {
  BLUE
  RED
  YELLOW
  GREEN
  PINK
  BLACK
  GOLD
  SILVER
  PURPLE
  ORANGE
  NONE
  WHITE
}

#interface BasicCard {
#  id: ID!
#  name: String!
#  description: String!
#  set: String!
#}

input AddCardInput {
  id: ID!
  name: String!
  description: String!
  entity: CardType!
  actionType: ActionType
  attack: Int
  shield: Int
  energy: Int
  ability: String
  symbol: String
  frequency: Float
  energyEfficiency: Float
  extraDamage: Float
  cardOrderManipulation: Boolean 
  advantage: CardAdvantage
  team: String
  image: String
  specialText: String
  multiAttack: Boolean
  releaseDate: Int
  role: String
  set: String!
  color: RangerColor 
}

input UpdateCardInput {
  id: ID
  name: String
  description: String
  entity: CardType
  actionType: ActionType
  attack: Int
  shield: Int
  energy: Int
  ability: String
  symbol: String
  frequency: Float
  energyEfficiency: Float
  extraDamage: Float
  cardOrderManipulation: Boolean 
  advantage: CardAdvantage
  team: String
  image: String
  specialText: String
  multiAttack: Boolean
  releaseDate: Int
  role: String
  set: String!
}

type Card {
  id: ID!
  name: String!
  description: String!
  entity: CardType!
  actionType: ActionType
  attack: Int
  shield: Int
  energy: Int
  ability: String
  symbol: String
  frequency: Float
  energyEfficiency: Float
  extraDamage: Float
  cardOrderManipulation: Boolean 
  advantage: CardAdvantage
  team: String
  image: String
  specialText: String
  multiAttack: Boolean
  releaseDate: Int
  role: String
  set: String!
  color: RangerColor

  # _id: Generated by FaunaDB as each document's unique identifier
  # _ts: Timestamp generated by FaunaDB upon object creation
}

input AddCardInfoInput {
  id: ID!
  name: String!
  description: String!
  set: String!
  team: String
  image: String
  frequency: Float
  energy: Int
  attack: Int
  shield: Int
  actionType: ActionType
  symbol: String
  specialText: String
  multiAttack: Boolean 
  color: RangerColor
  releaseDate: String 
}

input UpdateCardInfoInput {
  id: ID
  name: String
  description: String
  set: String
  team: String
  image: String
  frequency: Float
  energy: Int
  attack: Int
  shield: Int
  actionType: ActionType
  symbol: String
  specialText: String
  multiAttack: Boolean 
  color: RangerColor
  releaseDate: String 
}

type CardInfo {
    id: ID!
    name: String!
    description: String!
    set: String!
    team: String
    image: String
    frequency: Float
    energy: Int
    attack: Int
    shield: Int
    actionType: ActionType
    symbol: String
    specialText: String
    multiAttack: Boolean 
    color: RangerColor
    releaseDate: String
}

input AddZordInput {
  id: ID!
  name: String!
  description: String!
  set: String!
  color: RangerColor!
  releaseDate: Int
  image: String
}

input UpdateZord {
  id: ID
  name: String
  description: String
  set: String
  color: RangerColor
  releaseDate: Int
  image: String
}

type Zord {
    id: ID!
    name: String!
    description: String!
    set: String!
    color: RangerColor!
    releaseDate: Int
    image: String
}

input AddRangerInput {
    id: ID!
    name: String!
    description: String!
    set: String!
    image: String
    ability: String!
    team: String
    color: RangerColor!
    releaseDate: Int
    role: String
}

input UpdateRangerInput {
    id: ID
    name: String
    description: String
    set: String
    image: String
    ability: String
    team: String
    color: RangerColor
    releaseDate: Int
    role: String
}

type Ranger {
    id: ID!
    name: String!
    description: String!
    set: String!
    image: String
    ability: String!
    team: String
    color: RangerColor!
    releaseDate: Int
    role: String
}

input AddMegazordInput {
    id: ID!
    name: String!
    description: String!
    set: String!
    image: String
    ability: String!
    color: RangerColor!
    team: String
    releaseDate: Int
}

input UpdateMegazordInput {
    id: ID
    name: String
    description: String
    set: String
    image: String
    ability: String
    color: RangerColor
    team: String
    releaseDate: Int
}

type Megazord {
    id: ID!
    name: String!
    description: String!
    set: String!
    image: String
    ability: String!
    color: RangerColor!
    team: String
    releaseDate: Int
}


type Query {
  findCardById(id:ID!): [Card!]
  findAllCards: [Card!] @resolver(name: "findAllCards")
  allCardInfo: [CardInfo!]
  allZords: [Zord!]
  allRangers: [Ranger!]
  allMegazords: [Megazord!]
}

type Todo {
  task: String!
  completed: Boolean!
}

type Mutation {
  # addCards(cards: [AddCardInput]): [Card]! @resolver(name: "findAllCards" paginated:true)
# updateCard(id: ID!, input: updateCard!): Card
# addCardInfo(input: addCardInfo!): CardInfo
# updateCardInfo(id: ID!, input: updateCardInfo!): CardInfo
# addRanger(input: addRanger!): Ranger
# updateRanger(id: ID!, input: updateRanger!): Ranger
# addZord(input: addZord!): Zord
# updateZord(id: ID!, input: updateZord!): Zord
# addMegazord(input: addMegazord!): Megazord
# updateMegazord(id: ID!, input: updateMegazord!): Megazord
}